;buildInfoPackage: chisel3, version: 3.1.2, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2018-07-25 16:52:17.431, builtAtMillis: 1532537537431
circuit S8DP1 : 
  module MUX8 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip int_in : SInt<32>[8], flip tag : UInt<1>[8], choice : SInt<32>}
    
    io.choice <= asSInt(UInt<1>("h00")) @[MUX8.scala 41:13]
    
  module tag_refine : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip tag_in : UInt<1>[8], tag_out : UInt<1>[8]}
    
    wire _T_68 : UInt<1>[8] @[tag_refine.scala 28:24]
    _T_68[0] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[1] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[2] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[3] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[4] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[5] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[6] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    _T_68[7] <= UInt<1>("h00") @[tag_refine.scala 28:24]
    reg tag : UInt<1>[8], clock with : (reset => (reset, _T_68)) @[tag_refine.scala 28:20]
    reg find : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[tag_refine.scala 29:21]
    tag[0] <= io.tag_in[0] @[tag_refine.scala 31:7]
    tag[1] <= io.tag_in[1] @[tag_refine.scala 31:7]
    tag[2] <= io.tag_in[2] @[tag_refine.scala 31:7]
    tag[3] <= io.tag_in[3] @[tag_refine.scala 31:7]
    tag[4] <= io.tag_in[4] @[tag_refine.scala 31:7]
    tag[5] <= io.tag_in[5] @[tag_refine.scala 31:7]
    tag[6] <= io.tag_in[6] @[tag_refine.scala 31:7]
    tag[7] <= io.tag_in[7] @[tag_refine.scala 31:7]
    node _T_130 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_130 : @[tag_refine.scala 34:28]
      node _T_132 = eq(tag[0], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_132 : @[tag_refine.scala 35:31]
        tag[0] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_136 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_136 : @[tag_refine.scala 34:28]
      node _T_138 = eq(tag[1], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_138 : @[tag_refine.scala 35:31]
        tag[1] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_142 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_142 : @[tag_refine.scala 34:28]
      node _T_144 = eq(tag[2], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_144 : @[tag_refine.scala 35:31]
        tag[2] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_148 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_148 : @[tag_refine.scala 34:28]
      node _T_150 = eq(tag[3], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_150 : @[tag_refine.scala 35:31]
        tag[3] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_154 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_154 : @[tag_refine.scala 34:28]
      node _T_156 = eq(tag[4], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_156 : @[tag_refine.scala 35:31]
        tag[4] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_160 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_160 : @[tag_refine.scala 34:28]
      node _T_162 = eq(tag[5], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_162 : @[tag_refine.scala 35:31]
        tag[5] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_166 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_166 : @[tag_refine.scala 34:28]
      node _T_168 = eq(tag[6], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_168 : @[tag_refine.scala 35:31]
        tag[6] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    node _T_172 = eq(find, UInt<1>("h00")) @[tag_refine.scala 34:15]
    when _T_172 : @[tag_refine.scala 34:28]
      node _T_174 = eq(tag[7], UInt<1>("h01")) @[tag_refine.scala 35:19]
      when _T_174 : @[tag_refine.scala 35:31]
        tag[7] <= UInt<1>("h00") @[tag_refine.scala 36:16]
        find <= UInt<1>("h01") @[tag_refine.scala 37:14]
        skip @[tag_refine.scala 35:31]
      skip @[tag_refine.scala 34:28]
    io.tag_out[0] <= tag[0] @[tag_refine.scala 42:14]
    io.tag_out[1] <= tag[1] @[tag_refine.scala 42:14]
    io.tag_out[2] <= tag[2] @[tag_refine.scala 42:14]
    io.tag_out[3] <= tag[3] @[tag_refine.scala 42:14]
    io.tag_out[4] <= tag[4] @[tag_refine.scala 42:14]
    io.tag_out[5] <= tag[5] @[tag_refine.scala 42:14]
    io.tag_out[6] <= tag[6] @[tag_refine.scala 42:14]
    io.tag_out[7] <= tag[7] @[tag_refine.scala 42:14]
    
  module S8DP1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip int_in_A : SInt<32>[8], flip int_in_B : SInt<32>, flip tag : UInt<1>[8], out_tag : UInt<1>[8], result : SInt<32>}
    
    reg acc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[S8DP1.scala 28:20]
    inst mux of MUX8 @[S8DP1.scala 29:19]
    mux.clock <= clock
    mux.reset <= reset
    inst tag_change of tag_refine @[S8DP1.scala 30:26]
    tag_change.clock <= clock
    tag_change.reset <= reset
    mux.io.int_in[0] <= io.int_in_A[0] @[S8DP1.scala 32:17]
    mux.io.int_in[1] <= io.int_in_A[1] @[S8DP1.scala 32:17]
    mux.io.int_in[2] <= io.int_in_A[2] @[S8DP1.scala 32:17]
    mux.io.int_in[3] <= io.int_in_A[3] @[S8DP1.scala 32:17]
    mux.io.int_in[4] <= io.int_in_A[4] @[S8DP1.scala 32:17]
    mux.io.int_in[5] <= io.int_in_A[5] @[S8DP1.scala 32:17]
    mux.io.int_in[6] <= io.int_in_A[6] @[S8DP1.scala 32:17]
    mux.io.int_in[7] <= io.int_in_A[7] @[S8DP1.scala 32:17]
    mux.io.tag[0] <= io.tag[0] @[S8DP1.scala 33:14]
    mux.io.tag[1] <= io.tag[1] @[S8DP1.scala 33:14]
    mux.io.tag[2] <= io.tag[2] @[S8DP1.scala 33:14]
    mux.io.tag[3] <= io.tag[3] @[S8DP1.scala 33:14]
    mux.io.tag[4] <= io.tag[4] @[S8DP1.scala 33:14]
    mux.io.tag[5] <= io.tag[5] @[S8DP1.scala 33:14]
    mux.io.tag[6] <= io.tag[6] @[S8DP1.scala 33:14]
    mux.io.tag[7] <= io.tag[7] @[S8DP1.scala 33:14]
    node _T_89 = mul(io.int_in_B, mux.io.choice) @[S8DP1.scala 35:28]
    node _T_90 = add(acc, _T_89) @[S8DP1.scala 35:14]
    node _T_91 = tail(_T_90, 1) @[S8DP1.scala 35:14]
    node _T_92 = asSInt(_T_91) @[S8DP1.scala 35:14]
    acc <= _T_92 @[S8DP1.scala 35:7]
    tag_change.io.tag_in[0] <= io.tag[0] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[1] <= io.tag[1] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[2] <= io.tag[2] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[3] <= io.tag[3] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[4] <= io.tag[4] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[5] <= io.tag[5] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[6] <= io.tag[6] @[S8DP1.scala 37:24]
    tag_change.io.tag_in[7] <= io.tag[7] @[S8DP1.scala 37:24]
    io.out_tag[0] <= tag_change.io.tag_out[0] @[S8DP1.scala 38:14]
    io.out_tag[1] <= tag_change.io.tag_out[1] @[S8DP1.scala 38:14]
    io.out_tag[2] <= tag_change.io.tag_out[2] @[S8DP1.scala 38:14]
    io.out_tag[3] <= tag_change.io.tag_out[3] @[S8DP1.scala 38:14]
    io.out_tag[4] <= tag_change.io.tag_out[4] @[S8DP1.scala 38:14]
    io.out_tag[5] <= tag_change.io.tag_out[5] @[S8DP1.scala 38:14]
    io.out_tag[6] <= tag_change.io.tag_out[6] @[S8DP1.scala 38:14]
    io.out_tag[7] <= tag_change.io.tag_out[7] @[S8DP1.scala 38:14]
    io.result <= acc @[S8DP1.scala 40:13]
    
